--- ../src-base/minecraft/net/minecraft/entity/EntityTracker.java
+++ ../src-work/minecraft/net/minecraft/entity/EntityTracker.java
@@ -2,8 +2,12 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+
+import java.util.Collections;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ICrashReportDetail;
@@ -47,199 +51,160 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import wearblackallday.javautils.util.ThreadPool;
 
-public class EntityTracker
-{
+public class EntityTracker {
     private static final Logger LOGGER = LogManager.getLogger();
     private final WorldServer world;
-    private final Set<EntityTrackerEntry> entries = Sets.<EntityTrackerEntry>newHashSet();
-    private final IntHashMap<EntityTrackerEntry> trackedEntityHashTable = new IntHashMap<EntityTrackerEntry>();
+    private final Set<EntityTrackerEntry> entries;
+    public final IntHashMap<EntityTrackerEntry> trackedEntityHashTable;
     private int maxTrackingDistanceThreshold;
+    private final java.util.concurrent.locks.ReentrantLock trackerLock = new java.util.concurrent.locks.ReentrantLock(); // Thermos - prevent entity tracking crashes
 
-    public EntityTracker(WorldServer theWorldIn)
-    {
+    public EntityTracker(WorldServer theWorldIn) {
+        this.entries = ConcurrentHashMap.newKeySet();
+        this.trackedEntityHashTable = new IntHashMap<EntityTrackerEntry>();
         this.world = theWorldIn;
         this.maxTrackingDistanceThreshold = theWorldIn.getMinecraftServer().getPlayerList().getEntityViewDistance();
     }
 
-    public static long getPositionLong(double value)
-    {
+    public static long getPositionLong(double value) {
         return MathHelper.lfloor(value * 4096.0D);
     }
 
     @SideOnly(Side.CLIENT)
-    public static void updateServerPosition(Entity entityIn, double x, double y, double z)
-    {
+    public static void updateServerPosition(Entity entityIn, double x, double y, double z) {
         entityIn.serverPosX = getPositionLong(x);
         entityIn.serverPosY = getPositionLong(y);
         entityIn.serverPosZ = getPositionLong(z);
     }
 
-    public void track(Entity entityIn)
-    {
-        if (entityIn instanceof EntityPlayerMP)
-        {
+    public void track(Entity entityIn) {
+        if (net.minecraftforge.fml.common.registry.EntityRegistry.instance().tryTrackingEntity(this, entityIn)) return;
+
+        if (entityIn instanceof EntityPlayerMP) {
             this.track(entityIn, 512, 2);
-            EntityPlayerMP entityplayermp = (EntityPlayerMP)entityIn;
+            EntityPlayerMP entityplayermp = (EntityPlayerMP) entityIn;
+            waitForLock(); // Themrmos Tracker Crash Prevention
+            lock(); // TTCP
 
-            for (EntityTrackerEntry entitytrackerentry : this.entries)
-            {
-                if (entitytrackerentry.getTrackedEntity() != entityplayermp)
-                {
+            for (EntityTrackerEntry entitytrackerentry : this.entries) {
+                if (entitytrackerentry.getTrackedEntity() != entityplayermp) {
                     entitytrackerentry.updatePlayerEntity(entityplayermp);
                 }
             }
-        }
-        else if (entityIn instanceof EntityFishHook)
-        {
+            unlock();// TTCP
+        } else if (entityIn instanceof EntityFishHook) {
             this.track(entityIn, 64, 5, true);
-        }
-        else if (entityIn instanceof EntityArrow)
-        {
+        } else if (entityIn instanceof EntityArrow) {
             this.track(entityIn, 64, 20, false);
-        }
-        else if (entityIn instanceof EntitySmallFireball)
-        {
+        } else if (entityIn instanceof EntitySmallFireball) {
             this.track(entityIn, 64, 10, false);
-        }
-        else if (entityIn instanceof EntityFireball)
-        {
+        } else if (entityIn instanceof EntityFireball) {
             this.track(entityIn, 64, 10, true);
-        }
-        else if (entityIn instanceof EntitySnowball)
-        {
+        } else if (entityIn instanceof EntitySnowball) {
             this.track(entityIn, 64, 10, true);
-        }
-        else if (entityIn instanceof EntityLlamaSpit)
-        {
+        } else if (entityIn instanceof EntityLlamaSpit) {
             this.track(entityIn, 64, 10, false);
-        }
-        else if (entityIn instanceof EntityEnderPearl)
-        {
+        } else if (entityIn instanceof EntityEnderPearl) {
             this.track(entityIn, 64, 10, true);
-        }
-        else if (entityIn instanceof EntityEnderEye)
-        {
+        } else if (entityIn instanceof EntityEnderEye) {
             this.track(entityIn, 64, 4, true);
-        }
-        else if (entityIn instanceof EntityEgg)
-        {
+        } else if (entityIn instanceof EntityEgg) {
             this.track(entityIn, 64, 10, true);
-        }
-        else if (entityIn instanceof EntityPotion)
-        {
+        } else if (entityIn instanceof EntityPotion) {
             this.track(entityIn, 64, 10, true);
-        }
-        else if (entityIn instanceof EntityExpBottle)
-        {
+        } else if (entityIn instanceof EntityExpBottle) {
             this.track(entityIn, 64, 10, true);
-        }
-        else if (entityIn instanceof EntityFireworkRocket)
-        {
+        } else if (entityIn instanceof EntityFireworkRocket) {
             this.track(entityIn, 64, 10, true);
-        }
-        else if (entityIn instanceof EntityItem)
-        {
+        } else if (entityIn instanceof EntityItem) {
             this.track(entityIn, 64, 20, true);
-        }
-        else if (entityIn instanceof EntityMinecart)
-        {
+        } else if (entityIn instanceof EntityMinecart) {
             this.track(entityIn, 80, 3, true);
-        }
-        else if (entityIn instanceof EntityBoat)
-        {
+        } else if (entityIn instanceof EntityBoat) {
             this.track(entityIn, 80, 3, true);
-        }
-        else if (entityIn instanceof EntitySquid)
-        {
+        } else if (entityIn instanceof EntitySquid) {
             this.track(entityIn, 64, 3, true);
-        }
-        else if (entityIn instanceof EntityWither)
-        {
+        } else if (entityIn instanceof EntityWither) {
             this.track(entityIn, 80, 3, false);
-        }
-        else if (entityIn instanceof EntityShulkerBullet)
-        {
+        } else if (entityIn instanceof EntityShulkerBullet) {
             this.track(entityIn, 80, 3, true);
-        }
-        else if (entityIn instanceof EntityBat)
-        {
+        } else if (entityIn instanceof EntityBat) {
             this.track(entityIn, 80, 3, false);
-        }
-        else if (entityIn instanceof EntityDragon)
-        {
+        } else if (entityIn instanceof EntityDragon) {
             this.track(entityIn, 160, 3, true);
-        }
-        else if (entityIn instanceof IAnimals)
-        {
+        } else if (entityIn instanceof IAnimals) {
             this.track(entityIn, 80, 3, true);
-        }
-        else if (entityIn instanceof EntityTNTPrimed)
-        {
+        } else if (entityIn instanceof EntityTNTPrimed) {
             this.track(entityIn, 160, 10, true);
-        }
-        else if (entityIn instanceof EntityFallingBlock)
-        {
+        } else if (entityIn instanceof EntityFallingBlock) {
             this.track(entityIn, 160, 20, true);
-        }
-        else if (entityIn instanceof EntityHanging)
-        {
+        } else if (entityIn instanceof EntityHanging) {
             this.track(entityIn, 160, Integer.MAX_VALUE, false);
-        }
-        else if (entityIn instanceof EntityArmorStand)
-        {
+        } else if (entityIn instanceof EntityArmorStand) {
             this.track(entityIn, 160, 3, true);
-        }
-        else if (entityIn instanceof EntityXPOrb)
-        {
+        } else if (entityIn instanceof EntityXPOrb) {
             this.track(entityIn, 160, 20, true);
-        }
-        else if (entityIn instanceof EntityAreaEffectCloud)
-        {
-            this.track(entityIn, 160, Integer.MAX_VALUE, true);
-        }
-        else if (entityIn instanceof EntityEnderCrystal)
-        {
+        } else if (entityIn instanceof EntityAreaEffectCloud) {
+            this.track(entityIn, 160, 10 /*Integer.MAX_VALUE*/, true); // CraftBukkit
+        } else if (entityIn instanceof EntityEnderCrystal) {
             this.track(entityIn, 256, Integer.MAX_VALUE, false);
-        }
-        else if (entityIn instanceof EntityEvokerFangs)
-        {
+        } else if (entityIn instanceof EntityEvokerFangs) {
             this.track(entityIn, 160, 2, false);
         }
     }
 
-    public void track(Entity entityIn, int trackingRange, int updateFrequency)
-    {
+    private void waitForLock() {
+        int counter = 0;
+        while(this.trackerLock.isLocked()){
+
+            try{counter += 1;
+                if(counter >= 100)
+                {
+                    unlock();
+                    break;
+                }
+                Thread.sleep(100L);
+            } catch (Exception e){
+
+            }
+        }
+    }
+    public void lock(){
+        this.trackerLock.lock();
+    }
+    public void unlock(){
+        if(!this.trackerLock.isLocked()) return;
+        this.trackerLock.unlock();
+    }
+
+    public void track(Entity entityIn, int trackingRange, int updateFrequency) {
         this.track(entityIn, trackingRange, updateFrequency, false);
     }
 
-    public void track(Entity entityIn, int trackingRange, final int updateFrequency, boolean sendVelocityUpdates)
-    {
-        try
-        {
-            if (this.trackedEntityHashTable.containsItem(entityIn.getEntityId()))
-            {
-                throw new IllegalStateException("Entity is already tracked!");
+    public synchronized void track(Entity entityIn, int trackingRange, final int updateFrequency, boolean sendVelocityUpdates) {
+        try {
+            if (this.trackedEntityHashTable.containsItem(entityIn.getEntityId())) {
+                return;
             }
 
             EntityTrackerEntry entitytrackerentry = new EntityTrackerEntry(entityIn, trackingRange, this.maxTrackingDistanceThreshold, updateFrequency, sendVelocityUpdates);
+            waitForLock(); lock();// TTCP
             this.entries.add(entitytrackerentry);
+            unlock();// TTCP
             this.trackedEntityHashTable.addKey(entityIn.getEntityId(), entitytrackerentry);
             entitytrackerentry.updatePlayerEntities(this.world.playerEntities);
-        }
-        catch (Throwable throwable)
-        {
+        } catch (Throwable throwable) {
+            unlock(); // TTCP
             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Adding entity to track");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("Entity To Track");
             crashreportcategory.addCrashSection("Tracking range", trackingRange + " blocks");
-            crashreportcategory.addDetail("Update interval", new ICrashReportDetail<String>()
-            {
-                public String call() throws Exception
-                {
+            crashreportcategory.addDetail("Update interval", new ICrashReportDetail<String>() {
+                public String call() throws Exception {
                     String s = "Once per " + updateFrequency + " ticks";
 
-                    if (updateFrequency == Integer.MAX_VALUE)
-                    {
+                    if (updateFrequency == Integer.MAX_VALUE) {
                         s = "Maximum (" + s + ")";
                     }
 
@@ -247,164 +212,158 @@
                 }
             });
             entityIn.addEntityCrashInfo(crashreportcategory);
-            ((EntityTrackerEntry)this.trackedEntityHashTable.lookup(entityIn.getEntityId())).getTrackedEntity().addEntityCrashInfo(crashreport.makeCategory("Entity That Is Already Tracked"));
+            ((EntityTrackerEntry) this.trackedEntityHashTable.lookup(entityIn.getEntityId())).getTrackedEntity().addEntityCrashInfo(crashreport.makeCategory("Entity That Is Already Tracked"));
 
-            try
-            {
+            try {
                 throw new ReportedException(crashreport);
+            } catch (ReportedException reportedexception) {
+                LOGGER.error("\"Silently\" catching entity tracking error.", (Throwable) reportedexception);
             }
-            catch (ReportedException reportedexception)
-            {
-                LOGGER.error("\"Silently\" catching entity tracking error.", (Throwable)reportedexception);
-            }
         }
     }
 
-    public void untrack(Entity entityIn)
-    {
-        if (entityIn instanceof EntityPlayerMP)
-        {
-            EntityPlayerMP entityplayermp = (EntityPlayerMP)entityIn;
-
-            for (EntityTrackerEntry entitytrackerentry : this.entries)
-            {
-                entitytrackerentry.removeFromTrackedPlayers(entityplayermp);
-            }
+    public void untrack(Entity entityIn) {
+        if (entityIn instanceof EntityPlayerMP) {
+            EntityPlayerMP entityplayermp = (EntityPlayerMP) entityIn;
+            waitForLock();lock();// TTCP
+            executor.execute(this.entries,object->{
+                object.removeFromTrackedPlayers(entityplayermp);
+            });
+            executor.awaitCompletion();
+            unlock();// TTCP
         }
 
         EntityTrackerEntry entitytrackerentry1 = this.trackedEntityHashTable.removeObject(entityIn.getEntityId());
 
-        if (entitytrackerentry1 != null)
-        {
+        if (entitytrackerentry1 != null) {
+            waitForLock();lock();// TTCP
             this.entries.remove(entitytrackerentry1);
+            unlock();// TTCP
             entitytrackerentry1.sendDestroyEntityPacketToTrackedPlayers();
         }
     }
-
-    public void tick()
-    {
-        List<EntityPlayerMP> list = Lists.<EntityPlayerMP>newArrayList();
-
-        for (EntityTrackerEntry entitytrackerentry : this.entries)
-        {
+    private final ThreadPool executor = new ThreadPool();
+    public void tick() {
+        waitForLock();lock();// TTCP
+        List<EntityPlayerMP> list = Collections.synchronizedList(Lists.newArrayList());
+        executor.execute(this.entries,entitytrackerentry -> {
             entitytrackerentry.updatePlayerList(this.world.playerEntities);
-
-            if (entitytrackerentry.playerEntitiesUpdated)
-            {
+            if (entitytrackerentry.playerEntitiesUpdated) {
                 Entity entity = entitytrackerentry.getTrackedEntity();
 
-                if (entity instanceof EntityPlayerMP)
-                {
-                    list.add((EntityPlayerMP)entity);
+                if (entity instanceof EntityPlayerMP) {
+                    list.add((EntityPlayerMP) entity);
                 }
             }
-        }
-
-        for (int i = 0; i < list.size(); ++i)
-        {
-            EntityPlayerMP entityplayermp = list.get(i);
-
-            for (EntityTrackerEntry entitytrackerentry1 : this.entries)
-            {
-                if (entitytrackerentry1.getTrackedEntity() != entityplayermp)
-                {
+        });
+        executor.awaitCompletion();
+        unlock();
+        for (EntityPlayerMP entityplayermp : list) {
+            waitForLock();
+            lock();// TTCP
+            executor.execute(this.entries,entitytrackerentry1->{
+                if (entitytrackerentry1.getTrackedEntity() != entityplayermp) {
                     entitytrackerentry1.updatePlayerEntity(entityplayermp);
                 }
-            }
+            });
+            executor.awaitCompletion();
+            unlock();
         }
     }
 
-    public void updateVisibility(EntityPlayerMP player)
-    {
-        for (EntityTrackerEntry entitytrackerentry : this.entries)
-        {
-            if (entitytrackerentry.getTrackedEntity() == player)
-            {
+    public void updateVisibility(EntityPlayerMP player) {
+        executor.execute(this.entries, entitytrackerentry -> {
+            if (entitytrackerentry.getTrackedEntity() == player) {
                 entitytrackerentry.updatePlayerEntities(this.world.playerEntities);
-            }
-            else
-            {
+            } else {
                 entitytrackerentry.updatePlayerEntity(player);
             }
-        }
+        });
+        executor.awaitCompletion();
     }
 
-    public void sendToTracking(Entity entityIn, Packet<?> packetIn)
-    {
+    public void sendToTracking(Entity entityIn, Packet<?> packetIn) {
         EntityTrackerEntry entitytrackerentry = this.trackedEntityHashTable.lookup(entityIn.getEntityId());
 
-        if (entitytrackerentry != null)
-        {
+        if (entitytrackerentry != null) {
             entitytrackerentry.sendPacketToTrackedPlayers(packetIn);
         }
     }
 
-    public void sendToTrackingAndSelf(Entity entityIn, Packet<?> packetIn)
-    {
+    /* ======================================== FORGE START =====================================*/
+
+    // don't expose the EntityTrackerEntry directly so mods can't mess with the data in there as easily
+
+    /**
+     * Get all players tracking the given Entity. The Entity must be part of the World that this Tracker belongs to.
+     *
+     * @param entity the Entity
+     * @return all players tracking the Entity
+     */
+    public Set<? extends net.minecraft.entity.player.EntityPlayer> getTrackingPlayers(Entity entity) {
+        EntityTrackerEntry entry = (EntityTrackerEntry) trackedEntityHashTable.lookup(entity.getEntityId());
+        if (entry == null)
+            return java.util.Collections.emptySet();
+        else
+            return java.util.Collections.unmodifiableSet(entry.trackingPlayers);
+    }
+
+    /* ======================================== FORGE END   =====================================*/
+
+    public void sendToTrackingAndSelf(Entity entityIn, Packet<?> packetIn) {
         EntityTrackerEntry entitytrackerentry = this.trackedEntityHashTable.lookup(entityIn.getEntityId());
 
-        if (entitytrackerentry != null)
-        {
+        if (entitytrackerentry != null) {
             entitytrackerentry.sendToTrackingAndSelf(packetIn);
         }
     }
 
-    public void removePlayerFromTrackers(EntityPlayerMP player)
-    {
-        for (EntityTrackerEntry entitytrackerentry : this.entries)
-        {
+    public void removePlayerFromTrackers(EntityPlayerMP player) {
+        waitForLock(); lock(); // TTCP
+        for (EntityTrackerEntry entitytrackerentry : this.entries) {
             entitytrackerentry.removeTrackedPlayerSymmetric(player);
         }
+        unlock(); // TTCP
     }
 
-    public void sendLeashedEntitiesInChunk(EntityPlayerMP player, Chunk chunkIn)
-    {
-        List<Entity> list = Lists.<Entity>newArrayList();
-        List<Entity> list1 = Lists.<Entity>newArrayList();
-
-        for (EntityTrackerEntry entitytrackerentry : this.entries)
-        {
+    public void sendLeashedEntitiesInChunk(EntityPlayerMP player, Chunk chunkIn) {
+        List<Entity> list = Collections.synchronizedList(Lists.newArrayList());
+        List<Entity> list1 = Collections.synchronizedList(Lists.newArrayList());
+        waitForLock(); lock(); // TTCP
+        executor.execute(this.entries,entitytrackerentry->{
             Entity entity = entitytrackerentry.getTrackedEntity();
 
-            if (entity != player && entity.chunkCoordX == chunkIn.x && entity.chunkCoordZ == chunkIn.z)
-            {
+            if (entity != player && entity.chunkCoordX == chunkIn.x && entity.chunkCoordZ == chunkIn.z) {
                 entitytrackerentry.updatePlayerEntity(player);
 
-                if (entity instanceof EntityLiving && ((EntityLiving)entity).getLeashHolder() != null)
-                {
+                if (entity instanceof EntityLiving && ((EntityLiving) entity).getLeashHolder() != null) {
                     list.add(entity);
                 }
 
-                if (!entity.getPassengers().isEmpty())
-                {
+                if (!entity.getPassengers().isEmpty()) {
                     list1.add(entity);
                 }
             }
-        }
-
-        if (!list.isEmpty())
-        {
-            for (Entity entity1 : list)
-            {
-                player.connection.sendPacket(new SPacketEntityAttach(entity1, ((EntityLiving)entity1).getLeashHolder()));
+        });
+        executor.awaitCompletion();
+        unlock(); // TTCP
+        if (!list.isEmpty()) {
+            for (Entity entity1 : list) {
+                player.connection.sendPacket(new SPacketEntityAttach(entity1, ((EntityLiving) entity1).getLeashHolder()));
             }
         }
 
-        if (!list1.isEmpty())
-        {
-            for (Entity entity2 : list1)
-            {
+        if (!list1.isEmpty()) {
+            for (Entity entity2 : list1) {
                 player.connection.sendPacket(new SPacketSetPassengers(entity2));
             }
         }
     }
 
-    public void setViewDistance(int p_187252_1_)
-    {
+    public void setViewDistance(int p_187252_1_) {
         this.maxTrackingDistanceThreshold = (p_187252_1_ - 1) * 16;
 
-        for (EntityTrackerEntry entitytrackerentry : this.entries)
-        {
+        for (EntityTrackerEntry entitytrackerentry : this.entries) {
             entitytrackerentry.setMaxRange(this.maxTrackingDistanceThreshold);
         }
     }
